"""Luana_Martins_Ferreira_DR2_AT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i5Vla6JCixsqtDzCnc7XG7xmsABLzQX2


### 2. Crie uma função que realize o cadastro do veículo, recebendo com passagem uma lista com o banco de dados dos veículos e retorne essa mesma lista com o novo valor de registro atualizado. O campo de disponibilidade deve ter valor -1 para quando o veículo estiver disponível e o índice do cliente que o locou, cado esteja indisponível.
"""

def cadastrar_veiculo(veiculos):
    placa = input("Digite a placa do veículo: ")
    modelo = input("Digite o modelo do veículo: ")
    categoria = input("Digite a categoria do veículo (básico, intermediário ou luxo): ").lower()
    estado_atual = -1
    disponivel = input("O veículo está disponível? (s/n): ").lower()
    if disponivel == 'n':
        cliente_locatario = input("Digite o índice do cliente que locou o veículo: ")
        estado_atual = int(cliente_locatario)

    veiculos.append({'placa': placa, 'modelo': modelo, 'categoria': categoria, 'estado_atual': estado_atual})
    return veiculos

"""### 3. Crie uma função que realize o cadastro do cliente, recebendo como passagem uma lista com o banco de dados dos clientes e retorne essa mesma lista com o novo valor de registro atualizado. O nome do cliente deve conter apenas Nome e Sobrenome, devendo ser armazenado em uma lista com duas posições."""

def cadastro_cliente(clientes):
    nome = input('Digite o nome do cliente: ')
    sobrenome = input('Digite o sobrenome do cliente: ')
    cpf = input('Digite o CPF do cliente: ')
    email = input('Digite o email do cliente: ')
    clientes.append({'nome': nome, 'sobrenome': sobrenome, 'cpf': cpf, 'email': email, 'veiculo_locado': None})
    return clientes

"""### 4. Crie uma função que realize a busca de um veículo a partir da sua placa. Ela deve receber como passagem a lista contendo o banco de dados de veículos e a placa, e retorne uma lista contendo o índice do veículo desejado."""

def busca_placa(veiculos, placa):
    for i, veiculo in enumerate(veiculos):
        if veiculo['placa'] == placa:
            return i
    return None

"""### 5. Crie uma função que realize a busca por veículos, tendo como base o estado da locação. Ela deve receber como parâmetros de entrada a lista contendo o banco de dados dos veículos e um parâmetro booleano, que selecionará se a lista retornada será dos veículos disponíveis ou indisponíveis. O valor padrão para esse parâmetro deve ser disponivel=True. O retorno da função deve uma lista contendo os índices de todos os veículos selecionados."""

def busca_estado(veiculos, disponivel=True):
    indices = []
    for i, veiculo in enumerate(veiculos):
        if (veiculo['estado'] == -1 and disponivel) or (veiculo['estado'] != -1 and not disponivel):
            indices.append(i)
    return indices

"""### 6. Crie uma função que receba como parâmetros a lista contendo o banco de dados dos veículos e uma lista contendo índices de veículo e realize a impressão desses dados."""

def dados_veiculos(veiculos, indices):
    for i in indices:
        print('Placa:', veiculos[i]['placa'])
        print('Modelo:', veiculos[i]['modelo'])
        print('Categoria:', veiculos[i]['categoria'])
        if veiculos[i]['estado'] == -1:
            print('Estado: Disponível')
        else:
            print('Estado: Indisponível. Locado para cliente ID', veiculos[i]['estado'])

"""### 7. Crie uma função que faça a busca por cliente a partir do seu o nome ou o sobrenome. Deve receber como parâmetros a lista contendo o banco de dados dos clientes, o nome que deve ser localizado e um parâmetro booleano que informe se a busca deve ser realizada pelo nome ou sobrenome. O retorno deve ser uma lista contendo todos os índices onde houveram ocorrência do nome/sobrenome desejados."""

def busca_nome_sobrenome(clientes, nome, por_nome=True):
    indices = []
    for i, cliente in enumerate(clientes):
        if por_nome:
            if nome.lower() in cliente['nome'].lower():
                indices.append(i)
        else:
            if nome.lower() in cliente['sobrenome'].lower():
                indices.append(i)
    return indices

"""### 8. Crie uma função que imprima os dados de clientes. Ela receberá como parâmetro a lista contendo o banco de dados do cliente e uma lista contendo os índices de clientes e imprimirá os dados dos clientes listados."""

def dados_clientes(clientes, indices):
    for i in indices:
        print('Nome:', clientes[i]['nome'], clientes[i]['sobrenome'])
        print('CPF:', clientes[i]['cpf'])
        print('Email:', clientes[i]['email'])

"""### 9. Crie uma função que realize o aluguel do veículo. Ela deve receber como parâmetros as listas contendo os bancos de dados de veículos e clientes e retorná-los atualizados. A função deve solicitar a placa do veículo e avaliar se ele está disponível para locação. Caso não esteja, deve oferecer ao usuário a opção de inserir uma nova placa ou sair da opção. Caso o veículo esteja disponível, ela deve exibir os dados do veículo e pedir que o usuário confirme que está correto. Caso negativo, ofereça a opção de inserir uma nova placa ou sair. Se estiver correto, solicite o ID do cliente, faça a mesma avaliação e ofereça as mesmas opções apresentadas no caso dos veículos. Se tudo estiver correto, os campos de ‘disponibilidade do veículo’ e de ‘veículo locado’ devem ser atualizados nas respectivas bases de dados e um sumário da operação exibido na tela. A função deve retornar a duas listas atualizadas."""

def aluguel_veiculo(veiculos, clientes):
    placa = input('\nDigite a placa do veículo que deseja alugar: ')
    i_veiculo = busca_placa(veiculos, placa)
    if i_veiculo is None:
        print('Veículo não encontrado.')
        return veiculos, clientes

    veiculo = veiculos[i_veiculo]
    if veiculo['estado'] != -1:
        print('Veículo já locado.')
        return veiculos, clientes

    print('Veículo encontrado:')
    dados_veiculos([veiculo], [0])

    validacao = input('\nDeseja alugar este veículo? (digite S para sim ou N para não): ')
    if validacao.lower() != 's':
        return veiculos, clientes

    cliente_id = input('\nDigite o ID do cliente que está alugando: ')
    cliente_id = int(cliente_id)
    if cliente_id >= len(clientes) or cliente_id < 0:
        print('ID de cliente inválido.')
        return veiculos, clientes

    cliente = clientes[cliente_id]
    print('\nCliente encontrado:')
    dados_clientes([cliente], [0])

    validacao = input('\nDeseja associar este veículo ao cliente? (digite S para sim ou N para não): ')
    if validacao.lower() != 's':
        return veiculos, clientes

    veiculo['estado'] = cliente_id
    cliente['veiculo_locado'] = veiculo['placa']
    print('\nVeículo alugado com sucesso.')
    return veiculos, clientes

"""### 10. Crie uma função que faça a devolução do veículo, contabilizando o valor total da locação. Deve receber como parâmetros as listas de veículos e de clientes e retornar essas listas atualizadas. Deverá ser solicitado o nome ou o código do cliente. O processo de devolução deve desvincular o veículo do usuário, retornando-o para o estado ’disponível’ e remover o veículo da base do cliente. A contabilização deve ser feita informando o número de diárias utilizadas, relacionando-as ao valor da locação, sendo que o valor de é de R$150,00, RS250,00 e RS400,00 para as categorias básica, intermediária e luxo, respectivamente."""

def devolucao_veiculo(veiculos, clientes):
    nome_id = input('\nDigite o nome ou o ID do cliente: ')
    i_cliente = busca_nome_sobrenome(clientes, nome_id)
    if len(i_cliente) == 0:
        print('Cliente não encontrado.')
        return veiculos, clientes

    print('\nClientes encontrados:')
    dados_clientes(clientes, i_cliente)

    cliente_id = int(input('\nDigite o ID do cliente que está devolvendo o veículo: '))
    if cliente_id not in i_cliente:
        print('ID inválido.')
        return veiculos, clientes

    cliente = clientes[cliente_id]
    placa_locado = cliente['veiculo_locado']
    i_veiculo = busca_placa(veiculos, placa_locado)
    if i_veiculo is None:
        print('Veículo não encontrado.')
        return veiculos, clientes

    veiculo = veiculos[i_veiculo]
    veiculo['estado'] = -1
    cliente['veiculo_locado'] = None

    diarias = int(input('\nDigite o número de diárias utilizadas: '))
    valor = 0
    if veiculo['categoria'] == 'básico':
        valor = 150 * diarias
    elif veiculo['categoria'] == 'intermediário':
        valor = 250 * diarias
    elif veiculo['categoria'] == 'luxo':
        valor = 400 * diarias

    print('Veículo devolvido com sucesso.')
    print('Valor total da locação:', valor)
    return veiculos, clientes

"""### 11. Crie uma função que ofereça ao usuário o menu principal do sistema, sendo elas: Gerenciamento de Frota; Gerenciamento de Clientes; Gerenciamento de Locação; Finalizar."""

def menu_principal():
    print('\n----- MENU PRINCIPAL -----')
    print('1. Gerenciamento de frota')
    print('2. Gerenciamento de clientes')
    print('3. Gerenciamento de locação')
    print('4. Finalizar')
    opcao = input('\nEscolha uma opção: ')
    return opcao

"""### 12. Crie uma função que permita o acesso às funções de Gestão de frota, sendo elas: Cadastro de Veículo; Busca por Placa, Busca por Disponibilidade; Voltar."""

def menu_gestao_frota():
    print('\n----- GERENCIAMENTO DE FROTA -----')
    print('1. Cadastro de veículo')
    print('2. Busca por placa')
    print('3. Busca por disponibilidade')
    print('4. Voltar')
    opcao = input('\nEscolha uma opção: ')
    return opcao

"""### 13. Crie uma função que permita ao usuário fazer a busca de um veículo por placa e imprima na tela os dados do veículo."""

def main():
    veiculos = []
    clientes = []
    while True:
        opcao_principal = menu_principal()
        if opcao_principal == '1':
            while True:
                opcao_frota = menu_gestao_frota()
                if opcao_frota == '1':
                    veiculos = cadastro_veiculo(veiculos)
                elif opcao_frota == '2':
                    placa = input('\nDigite a placa do veículo: ')
                    i_veiculo = busca_placa(veiculos, placa)
                    if i_veiculo is not None:
                        dados_veiculos(veiculos, [i_veiculo])
                    else:
                        print('Veículo não encontrado.')
                elif opcao_frota == '4':
                    break
                else:
                    print('Opção inválida.')

if __name__ == '__main__':
    main()

"""### 14. Crie uma função que permita ao usuário fazer a busca de veículos por sua disponibilidade, oferecendo a opção de escolha entre disponível ou indisponível e imprime na tela o resultado da busca."""

def main():
    veiculos = []
    clientes = []
    while True:
        opcao_principal = menu_principal()
        if opcao_principal == '1':
            while True:
                opcao_frota = menu_gestao_frota()
                if opcao_frota == '1':
                    veiculos = cadastro_veiculo(veiculos)
                elif opcao_frota == '2':
                    placa = input('\nDigite a placa do veículo: ')
                    i_veiculo = busca_placa(veiculos, placa)
                    if i_veiculo is not None:
                        dados_veiculos(veiculos, [i_veiculo])
                    else:
                        print('Veículo não encontrado.')
                elif opcao_frota == '3':
                    disponivel = input('\nDeseja buscar veículos disponíveis? (digite S para sim ou N para não): ').lower()
                    if disponivel == 's':
                        disponivel = True
                    else:
                        disponivel = False
                    i_veiculos = busca_estado(veiculos, disponivel)
                    dados_veiculos(veiculos, i_veiculos)
                elif opcao_frota == '4':
                    break
                else:
                    print('Opção inválida.')

if __name__ == '__main__':
    main()

"""### 15. Crie uma função que permita o acesso às funções de Gerenciamento de Clientes, sendo elas: Cadastro de Cliente, Busca de Clientes; Voltar."""

def menu_gestao_clientes():
    print('\n----- GERENCIAMENTO DE CLIENTES -----')
    print('1. Cadastro de cliente')
    print('2. Busca de clientes')
    print('3. Voltar')
    opcao = input('\nEscolha uma opção: ')
    return opcao

"""### 16. Crie uma função que permita ao usuário fazer a busca por cliente, oferecendo a opção de nome ou sobrenome, e imprima o resultado na tela."""

def main():
    veiculos = []
    clientes = []
    while True:
        opcao_principal = menu_principal()
        if opcao_principal == '2':
            while True:
                opcao_clientes = menu_gestao_clientes()
                if opcao_clientes == '1':
                    clientes = cadastro_cliente(clientes)
                elif opcao_clientes == '2':
                    nome = input('\nDigite o nome ou sobrenome do cliente: ')
                    i_clientes = busca_nome_sobrenome(clientes, nome)
                    if len(i_clientes) > 0:
                        dados_clientes(clientes, i_clientes)
                    elif len(i_clientes) > 1:
                        dados_clientes(clientes, i_clientes)
                    else:
                        print('Cliente não encontrado.')
                elif opcao_clientes == '3':
                    break
                else:
                    print('Opção inválida.')

if __name__ == '__main__':
    main()

"""### 17. Crie uma função que permita o acesso às funções de locação, sendo elas Alugar um Veículo; Devolver um Veículo; Voltar;."""

def main():
    veiculos = []
    clientes = []
    while True:
        opcao_principal = menu_principal()
        if opcao_principal == '3':
            while True:
                opcao_locacao = menu_locacao()
                if opcao_locacao == '1':
                    veiculos, clientes = aluguel_veiculo(veiculos, clientes)
                elif opcao_locacao == '2':
                    veiculos, clientes = devolucao_veiculo(veiculos, clientes)
                elif opcao_locacao == '3':
                    break
                else:
                    print('Opção inválida.')
        elif opcao_principal == '4':
            break
        else:
            print('Opção inválida.')

if __name__ == '__main__':
    main()

"""### 18. Crie as variáveis que serão utilizada para o armazenamento dos bancos de dados utilizados no sistema"""

veiculos = []

clientes = []

"""### 19. Construa a estrutura do sistema de forma que seja possível realizar todos os processos necessários."""

def cadastro_veiculo(veiculos):
    placa = input('Digite a placa do veículo: ')
    modelo = input('Digite o modelo do veículo: ')
    categoria = input('Digite a categoria do veículo (básico, intermediário ou luxo): ').lower()
    estado = -1
    disponivel = input('O veículo está disponível? (digite S para sim ou N para não): ').lower()
    if disponivel == 'n':
        cliente_locou = input('Digite o ID do cliente que alugou o veículo: ')
        estado = int(cliente_locou)

    veiculos.append({'placa': placa, 'modelo': modelo, 'categoria': categoria, 'estado': estado})
    return veiculos


def cadastro_cliente(clientes):
    nome = input('Digite o nome do cliente: ')
    sobrenome = input('Digite o sobrenome do cliente: ')
    cpf = input('Digite o CPF do cliente: ')
    email = input('Digite o email do cliente: ')
    clientes.append({'nome': nome, 'sobrenome': sobrenome, 'cpf': cpf, 'email': email, 'veiculo_locado': None})
    return clientes

def busca_placa(veiculos, placa):
    for i, veiculo in enumerate(veiculos):
        if veiculo['placa'] == placa:
            return i
    return None

def busca_estado(veiculos, disponivel=True):
    indices = []
    for i, veiculo in enumerate(veiculos):
        if (veiculo['estado'] == -1 and disponivel) or (veiculo['estado'] != -1 and not disponivel):
            indices.append(i)
    return indices

def dados_veiculos(veiculos, indices):
    for i in indices:
        print('Placa:', veiculos[i]['placa'])
        print('Modelo:', veiculos[i]['modelo'])
        print('Categoria:', veiculos[i]['categoria'])
        if veiculos[i]['estado'] == -1:
            print('Estado: Disponível')
        else:
            print('Estado: Indisponível. Locado para cliente ID', veiculos[i]['estado'])
        print()

def busca_nome_sobrenome(clientes, nome, por_nome=True):
    indices = []
    for i, cliente in enumerate(clientes):
        if por_nome:
            if nome.lower() in cliente['nome'].lower():
                indices.append(i)
        else:
            if nome.lower() in cliente['sobrenome'].lower():
                indices.append(i)
    return indices

def dados_clientes(clientes, indices):
    for i in indices:
        print('Nome:', clientes[i]['nome'], clientes[i]['sobrenome'])
        print('CPF:', clientes[i]['cpf'])
        print('Email:', clientes[i]['email'])
        print()

def aluguel_veiculo(veiculos, clientes):
    placa = input('\nDigite a placa do veículo que deseja alugar: ')
    i_veiculo = busca_placa(veiculos, placa)
    if i_veiculo is None:
        print('Veículo não encontrado.')
        return veiculos, clientes

    veiculo = veiculos[i_veiculo]
    if veiculo['estado'] != -1:
        print('Veículo já locado.')
        return veiculos, clientes

    print('Veículo encontrado:')
    dados_veiculos([veiculo], [0])

    validacao = input('\nDeseja alugar este veículo? (digite S para sim ou N para não): ')
    if validacao.lower() != 's':
        return veiculos, clientes

    cliente_id = input('\nDigite o ID do cliente que está alugando: ')
    cliente_id = int(cliente_id)
    if cliente_id >= len(clientes) or cliente_id < 0:
        print('ID de cliente inválido.')
        return veiculos, clientes

    cliente = clientes[cliente_id]
    print('\nCliente encontrado:')
    dados_clientes([cliente], [0])

    validacao = input('\nDeseja associar este veículo ao cliente? (digite S para sim ou N para não): ')
    if validacao.lower() != 's':
        return veiculos, clientes

    veiculo['estado'] = cliente_id
    cliente['veiculo_locado'] = veiculo['placa']
    print('\nVeículo alugado com sucesso.')
    return veiculos, clientes

def devolucao_veiculo(veiculos, clientes):
    nome_id = input('\nDigite o nome ou o ID do cliente: ')
    i_cliente = busca_nome_sobrenome(clientes, nome_id)
    if len(i_cliente) == 0:
        print('Cliente não encontrado.')
        return veiculos, clientes

    print('\nClientes encontrados:')
    dados_clientes(clientes, i_cliente)

    cliente_id = int(input('\nDigite o ID do cliente que está devolvendo o veículo: '))
    if cliente_id not in i_cliente:
        print('ID inválido.')
        return veiculos, clientes

    cliente = clientes[cliente_id]
    placa_locado = cliente['veiculo_locado']
    i_veiculo = busca_placa(veiculos, placa_locado)
    if i_veiculo is None:
        print('Veículo não encontrado.')
        return veiculos, clientes

    veiculo = veiculos[i_veiculo]
    veiculo['estado'] = -1
    cliente['veiculo_locado'] = None

    diarias = int(input('\nDigite o número de diárias utilizadas: '))
    valor = 0
    if veiculo['categoria'] == 'básico':
        valor = 150 * diarias
    elif veiculo['categoria'] == 'intermediário':
        valor = 250 * diarias
    elif veiculo['categoria'] == 'luxo':
        valor = 400 * diarias

    print('Veículo devolvido com sucesso.')
    print('Valor total da locação:', valor)
    return veiculos, clientes

def menu_principal():
    print('\n----- MENU PRINCIPAL -----')
    print('1. Gerenciamento de frota')
    print('2. Gerenciamento de clientes')
    print('3. Gerenciamento de locação')
    print('4. Finalizar')
    opcao = input('\nEscolha uma opção: ')
    return opcao

def menu_gestao_frota():
    print('\n----- GERENCIAMENTO DE FROTA -----')
    print('1. Cadastro de veículo')
    print('2. Busca por placa')
    print('3. Busca por disponibilidade')
    print('4. Voltar')
    opcao = input('\nEscolha uma opção: ')
    return opcao

def menu_gestao_clientes():
    print('\n----- GERENCIAMENTO DE CLIENTES -----')
    print('1. Cadastro de cliente')
    print('2. Busca de clientes')
    print('3. Voltar')
    opcao = input('\nEscolha uma opção: ')
    return opcao

def menu_locacao():
    print('\n----- GERENCIAMENTO DE LOCAÇÃO -----')
    print('1. Alugar um veículo')
    print('2. Devolver um veículo')
    print('3. Voltar')
    opcao = input('\nEscolha uma opção: ')
    return opcao

def main():
    veiculos = []
    clientes = []
    while True:
        opcao_principal = menu_principal()
        if opcao_principal == '1':
            while True:
                opcao_frota = menu_gestao_frota()
                if opcao_frota == '1':
                    veiculos = cadastro_veiculo(veiculos)
                elif opcao_frota == '2':
                    placa = input('\nDigite a placa do veículo: ')
                    i_veiculo = busca_placa(veiculos, placa)
                    if i_veiculo is not None:
                        dados_veiculos(veiculos, [i_veiculo])
                    else:
                        print('Veículo não encontrado.')
                elif opcao_frota == '3':
                    disponivel = input('\nDeseja buscar veículos disponíveis? (digite S para sim ou N para não): ').lower()
                    if disponivel == 's':
                        disponivel = True
                    else:
                        disponivel = False
                    i_veiculos = busca_estado(veiculos, disponivel)
                    dados_veiculos(veiculos, i_veiculos)
                elif opcao_frota == '4':
                    break
                else:
                    print('Opção inválida.')
        elif opcao_principal == '2':
            while True:
                opcao_clientes = menu_gestao_clientes()
                if opcao_clientes == '1':
                    clientes = cadastro_cliente(clientes)
                elif opcao_clientes == '2':
                    nome = input('\nDigite o nome ou sobrenome do cliente: ')
                    i_clientes = busca_nome_sobrenome(clientes, nome)
                    if len(i_clientes) > 0:
                        dados_clientes(clientes, i_clientes)
                    else:
                        print('Cliente não encontrado.')
                elif opcao_clientes == '3':
                    break
                else:
                    print('Opção inválida.')
        elif opcao_principal == '3':
            while True:
                opcao_locacao = menu_locacao()
                if opcao_locacao == '1':
                    veiculos, clientes = aluguel_veiculo(veiculos, clientes)
                elif opcao_locacao == '2':
                    veiculos, clientes = devolucao_veiculo(veiculos, clientes)
                elif opcao_locacao == '3':
                    break
                else:
                    print('Opção inválida.')
        elif opcao_principal == '4':
            break
        else:
            print('Opção inválida.')

if __name__ == '__main__':
    main()
